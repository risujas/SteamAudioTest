//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Settings/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Global"",
            ""id"": ""74f02d9e-0e43-423c-860d-1277e74aae3d"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""c4871e36-cfda-4937-a16b-433604758935"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MultiAction"",
                    ""type"": ""Button"",
                    ""id"": ""4462d6b6-b51c-4e5d-b5a2-5e77ee6caaba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""1786d140-45c4-4f58-b84c-281cf6a3b1df"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9502e87f-844e-4286-a605-aa657c0df129"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""523ff8d0-bb3d-44ba-8505-76ae74339797"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MultiAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09e9572b-5c1d-44ac-bbc5-834c052bf86d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a500c77-b6a1-409d-9bec-c616629ce3c9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""1fe49879-03ae-45f4-aff0-e6ae29ab6dd5"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""aada8080-c38c-4b86-989e-a794ccae9668"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a8196ff7-1571-4e05-b565-f4e0531537ca"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cb8f6523-6443-4a95-a5c2-9f7393cf2d8f"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3cc4f5cb-ec71-459c-a839-ece61a223071"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""AudioSourceController"",
            ""id"": ""e12f0570-4466-4ea9-8deb-d847a5110046"",
            ""actions"": [
                {
                    ""name"": ""VolumeDown"",
                    ""type"": ""Button"",
                    ""id"": ""0c5b448a-98d4-4475-ba96-52b839665974"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VolumeUp"",
                    ""type"": ""Button"",
                    ""id"": ""d7f7fb73-c3bc-4437-b2af-e3c79c8ee80d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextClip"",
                    ""type"": ""Button"",
                    ""id"": ""b842223a-e8e0-478f-8223-30f8af34321a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousClip"",
                    ""type"": ""Button"",
                    ""id"": ""0ca4795a-d8a9-4a37-a51a-d9fc924162fb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""3ad4fe9a-cea3-462c-9247-c83dd65e13be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnableMove"",
                    ""type"": ""Button"",
                    ""id"": ""9ae739c2-f809-45d5-bc6f-9decb7cba195"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnableHeightAdjustment"",
                    ""type"": ""Button"",
                    ""id"": ""02f34e00-8042-487b-a2d3-a23d0db83604"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnableRotate"",
                    ""type"": ""Button"",
                    ""id"": ""ee41b9d2-7df8-418d-a268-c1baae05ebdb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a8214ae-b7c3-4cf3-9851-3f2c5bf1b903"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VolumeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d06f4a77-b9a0-4433-a2c3-1d4119863bb3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VolumeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bf45582-8e0a-4cb9-9e7a-eacd985f9555"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextClip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7563699f-3b50-435b-ac5c-f7a39d8270b8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousClip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21a1bd53-4e68-4f4c-974a-041ea3443047"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f36a3f39-3053-4903-8f37-f1c25ee4a5fe"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3edecff-3f22-46f6-8032-1a179e431f4b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableHeightAdjustment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""529fb33d-0124-4e75-aa98-ecb5e5a4fc1b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_Select = m_Global.FindAction("Select", throwIfNotFound: true);
        m_Global_MultiAction = m_Global.FindAction("MultiAction", throwIfNotFound: true);
        m_Global_Cancel = m_Global.FindAction("Cancel", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        // AudioSourceController
        m_AudioSourceController = asset.FindActionMap("AudioSourceController", throwIfNotFound: true);
        m_AudioSourceController_VolumeDown = m_AudioSourceController.FindAction("VolumeDown", throwIfNotFound: true);
        m_AudioSourceController_VolumeUp = m_AudioSourceController.FindAction("VolumeUp", throwIfNotFound: true);
        m_AudioSourceController_NextClip = m_AudioSourceController.FindAction("NextClip", throwIfNotFound: true);
        m_AudioSourceController_PreviousClip = m_AudioSourceController.FindAction("PreviousClip", throwIfNotFound: true);
        m_AudioSourceController_Delete = m_AudioSourceController.FindAction("Delete", throwIfNotFound: true);
        m_AudioSourceController_EnableMove = m_AudioSourceController.FindAction("EnableMove", throwIfNotFound: true);
        m_AudioSourceController_EnableHeightAdjustment = m_AudioSourceController.FindAction("EnableHeightAdjustment", throwIfNotFound: true);
        m_AudioSourceController_EnableRotate = m_AudioSourceController.FindAction("EnableRotate", throwIfNotFound: true);
    }

    ~@Controls()
    {
        Debug.Assert(!m_Global.enabled, "This will cause a leak and performance issues, Controls.Global.Disable() has not been called.");
        Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, Controls.Camera.Disable() has not been called.");
        Debug.Assert(!m_AudioSourceController.enabled, "This will cause a leak and performance issues, Controls.AudioSourceController.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Global
    private readonly InputActionMap m_Global;
    private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
    private readonly InputAction m_Global_Select;
    private readonly InputAction m_Global_MultiAction;
    private readonly InputAction m_Global_Cancel;
    public struct GlobalActions
    {
        private @Controls m_Wrapper;
        public GlobalActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Global_Select;
        public InputAction @MultiAction => m_Wrapper.m_Global_MultiAction;
        public InputAction @Cancel => m_Wrapper.m_Global_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void AddCallbacks(IGlobalActions instance)
        {
            if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @MultiAction.started += instance.OnMultiAction;
            @MultiAction.performed += instance.OnMultiAction;
            @MultiAction.canceled += instance.OnMultiAction;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IGlobalActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @MultiAction.started -= instance.OnMultiAction;
            @MultiAction.performed -= instance.OnMultiAction;
            @MultiAction.canceled -= instance.OnMultiAction;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGlobalActions instance)
        {
            foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GlobalActions @Global => new GlobalActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Zoom;
    public struct CameraActions
    {
        private @Controls m_Wrapper;
        public CameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // AudioSourceController
    private readonly InputActionMap m_AudioSourceController;
    private List<IAudioSourceControllerActions> m_AudioSourceControllerActionsCallbackInterfaces = new List<IAudioSourceControllerActions>();
    private readonly InputAction m_AudioSourceController_VolumeDown;
    private readonly InputAction m_AudioSourceController_VolumeUp;
    private readonly InputAction m_AudioSourceController_NextClip;
    private readonly InputAction m_AudioSourceController_PreviousClip;
    private readonly InputAction m_AudioSourceController_Delete;
    private readonly InputAction m_AudioSourceController_EnableMove;
    private readonly InputAction m_AudioSourceController_EnableHeightAdjustment;
    private readonly InputAction m_AudioSourceController_EnableRotate;
    public struct AudioSourceControllerActions
    {
        private @Controls m_Wrapper;
        public AudioSourceControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @VolumeDown => m_Wrapper.m_AudioSourceController_VolumeDown;
        public InputAction @VolumeUp => m_Wrapper.m_AudioSourceController_VolumeUp;
        public InputAction @NextClip => m_Wrapper.m_AudioSourceController_NextClip;
        public InputAction @PreviousClip => m_Wrapper.m_AudioSourceController_PreviousClip;
        public InputAction @Delete => m_Wrapper.m_AudioSourceController_Delete;
        public InputAction @EnableMove => m_Wrapper.m_AudioSourceController_EnableMove;
        public InputAction @EnableHeightAdjustment => m_Wrapper.m_AudioSourceController_EnableHeightAdjustment;
        public InputAction @EnableRotate => m_Wrapper.m_AudioSourceController_EnableRotate;
        public InputActionMap Get() { return m_Wrapper.m_AudioSourceController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AudioSourceControllerActions set) { return set.Get(); }
        public void AddCallbacks(IAudioSourceControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_AudioSourceControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AudioSourceControllerActionsCallbackInterfaces.Add(instance);
            @VolumeDown.started += instance.OnVolumeDown;
            @VolumeDown.performed += instance.OnVolumeDown;
            @VolumeDown.canceled += instance.OnVolumeDown;
            @VolumeUp.started += instance.OnVolumeUp;
            @VolumeUp.performed += instance.OnVolumeUp;
            @VolumeUp.canceled += instance.OnVolumeUp;
            @NextClip.started += instance.OnNextClip;
            @NextClip.performed += instance.OnNextClip;
            @NextClip.canceled += instance.OnNextClip;
            @PreviousClip.started += instance.OnPreviousClip;
            @PreviousClip.performed += instance.OnPreviousClip;
            @PreviousClip.canceled += instance.OnPreviousClip;
            @Delete.started += instance.OnDelete;
            @Delete.performed += instance.OnDelete;
            @Delete.canceled += instance.OnDelete;
            @EnableMove.started += instance.OnEnableMove;
            @EnableMove.performed += instance.OnEnableMove;
            @EnableMove.canceled += instance.OnEnableMove;
            @EnableHeightAdjustment.started += instance.OnEnableHeightAdjustment;
            @EnableHeightAdjustment.performed += instance.OnEnableHeightAdjustment;
            @EnableHeightAdjustment.canceled += instance.OnEnableHeightAdjustment;
            @EnableRotate.started += instance.OnEnableRotate;
            @EnableRotate.performed += instance.OnEnableRotate;
            @EnableRotate.canceled += instance.OnEnableRotate;
        }

        private void UnregisterCallbacks(IAudioSourceControllerActions instance)
        {
            @VolumeDown.started -= instance.OnVolumeDown;
            @VolumeDown.performed -= instance.OnVolumeDown;
            @VolumeDown.canceled -= instance.OnVolumeDown;
            @VolumeUp.started -= instance.OnVolumeUp;
            @VolumeUp.performed -= instance.OnVolumeUp;
            @VolumeUp.canceled -= instance.OnVolumeUp;
            @NextClip.started -= instance.OnNextClip;
            @NextClip.performed -= instance.OnNextClip;
            @NextClip.canceled -= instance.OnNextClip;
            @PreviousClip.started -= instance.OnPreviousClip;
            @PreviousClip.performed -= instance.OnPreviousClip;
            @PreviousClip.canceled -= instance.OnPreviousClip;
            @Delete.started -= instance.OnDelete;
            @Delete.performed -= instance.OnDelete;
            @Delete.canceled -= instance.OnDelete;
            @EnableMove.started -= instance.OnEnableMove;
            @EnableMove.performed -= instance.OnEnableMove;
            @EnableMove.canceled -= instance.OnEnableMove;
            @EnableHeightAdjustment.started -= instance.OnEnableHeightAdjustment;
            @EnableHeightAdjustment.performed -= instance.OnEnableHeightAdjustment;
            @EnableHeightAdjustment.canceled -= instance.OnEnableHeightAdjustment;
            @EnableRotate.started -= instance.OnEnableRotate;
            @EnableRotate.performed -= instance.OnEnableRotate;
            @EnableRotate.canceled -= instance.OnEnableRotate;
        }

        public void RemoveCallbacks(IAudioSourceControllerActions instance)
        {
            if (m_Wrapper.m_AudioSourceControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAudioSourceControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_AudioSourceControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AudioSourceControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AudioSourceControllerActions @AudioSourceController => new AudioSourceControllerActions(this);
    public interface IGlobalActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnMultiAction(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IAudioSourceControllerActions
    {
        void OnVolumeDown(InputAction.CallbackContext context);
        void OnVolumeUp(InputAction.CallbackContext context);
        void OnNextClip(InputAction.CallbackContext context);
        void OnPreviousClip(InputAction.CallbackContext context);
        void OnDelete(InputAction.CallbackContext context);
        void OnEnableMove(InputAction.CallbackContext context);
        void OnEnableHeightAdjustment(InputAction.CallbackContext context);
        void OnEnableRotate(InputAction.CallbackContext context);
    }
}
